Die Race Condition kommt bei der Variable available_resources zustande.
Nämlich wenn dann später decrease_count und increase_count zu einem Zeitpunkt sehr zeitnahe aufgerufen
werden, kann es dazu kommen, dass eine Funktion die Variable aus dem Speicher liest und verändert, aber bevor
sie sie speichert liest die andere Funktion sie ebenfalls aus dem Speicher.
Dann würde die erste Funktion sie zwar verändert speichern, aber weil die andere Funktion "zu früh" eingelesen hat
überspeichert sie die Änderung der ersten Funktion.

zB:

decrease liest available_resources=4
increase liest available_resources=4
decrease speichert available_resources=4-1=3
increase speichert available_resources=4+1=5
available_resources=5 (erwartet wäre available_resources=4)

Betrifft also die variable available_resources in den Zeilen 37 und 25 im skeleton. Sichtbar kann die
Race Condition logischweise überall dort sein, wo aus available_resources ausgelesen wird. 